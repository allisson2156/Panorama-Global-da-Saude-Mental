# -*- coding: utf-8 -*-
"""TaxadeSuicidioShandong.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u0AcwmjBjyr6eJAW7XlHlyxc4Fe-Q0Yg
"""

# título
print("\033[1;34mTendências do Número de  Suicídios em Shandong\033[0m")

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_csv('/content/shangdongSuicide.csv')
df.head()

# Paragráfo

print("\033[1;34mTendências do Número de  Suicídios em Shandong\033[0m")

# Exibe informações sobre o DataFrame
df.info()

# Verifica a existência de valores nulos
df.isna().sum()

# Exclui colunas desnecessárias
df.drop(['Unnamed: 0', 'Person_ID'], axis = 1, inplace = True)

#Contando os valores das colunas
print(df['Hospitalised'].value_counts())
print('-'*30)
print(df['Died'].value_counts())
print('-'*30)
print(df['Urban'].value_counts())
print('-'*30)
print(df['Education'].value_counts())
print('-'*30)
print(df['Occupation'].value_counts())
print('-'*30)
print(df['method'].value_counts())

# Média de idade por ano
dfGroupedAge = df.groupby('Year')['Age'].mean().round(0)
print(dfGroupedAge)

# Média de maior indice em mês por ano
dfGroupedDeit = df.groupby('Year')['Month'].mean().round()
print(dfGroupedDeit)

print("\033[1;34mPrimeiras Informações\033[0m")

# Cria um histograma da idade das vítimas
plt.style.use('dark_background')
sns.histplot(data=df, x='Age', bins=9, kde=False, palette='mako', color='#446791')
plt.title('Idade das Vítimas')
plt.show()

def plots(df, x):
    plt.style.use('dark_background')
    fig, ax = plt.subplots(1, 2, figsize=(25, 10))
    Group_data = df.groupby(x)

    sns.barplot(x=Group_data['Age'].mean().index,
                y=Group_data['Age'].mean().values,
                ax=ax[0],
                palette='mako',
                hue=Group_data['Age'].mean().index,
                legend=False)

    for container in ax[0].containers:
        ax[0].bar_label(container, color='white', size=20, fmt='%.0f')

    create_pie_chart(df, x, ax[1])

    plt.suptitle(x, fontsize=25)
    plt.show()

def create_pie_chart(df, x, ax):
    if x == 'Occupation':
        occupation_counts = df[x].value_counts()
        farming_count = occupation_counts.get('farming', 0)
        household_count = occupation_counts.get('household', 0)
        others_unknown_count = occupation_counts.sum() - farming_count - household_count
        occupation_counts_modified = [farming_count, household_count, others_unknown_count]
        occupation_labels_modified = ['farming', 'household', 'others/unknown']

        plt.pie(x=occupation_counts_modified,
                labels=occupation_labels_modified,
                autopct='%.0f%%',
                shadow=True,
                colors=sns.color_palette('mako'))
    else:
        plt.pie(x=df[x].value_counts(),
                labels=df[x].value_counts().index,
                autopct='%.0f%%',
                shadow=True,
                colors=sns.color_palette('mako'))

for i in df.columns:
    if i != 'Age' and i != 'method' and i != 'Month':
        plots(df, i)

# Define o estilo de fundo escuro para os gráficos
plt.style.use('dark_background')

# Calcula o número de linhas e colunas para organizar os subplots
num_cols = 2
num_rows = (len(df.columns) - 4) // num_cols + ((len(df.columns) - 4) % num_cols > 0)

# Cria a figura e os subplots
fig, axs = plt.subplots(num_rows, num_cols, figsize=(10, 10))

# Índice do subplot atual
subplot_index = 0

# Percorre as colunas do dataframe
for i, feature in enumerate(df.columns):
    # Ignora as colunas 'Age', 'method', 'Occupation' e 'Died'
    if feature not in ['Age', 'method', 'Occupation', 'Died']:
        # Calcula a linha e coluna atual do subplot
        row = subplot_index // num_cols
        col = subplot_index % num_cols

        # Configurações específicas para a coluna 'Year'
        if feature == 'Year':
            year_labels = ['2010', '2011', '2012', '2013', '2014', '2015']  # Define os rótulos desejados para os anos

            # Cria um histograma com densidade (kde) e colorido por 'Died'
            sns.histplot(data=df, x=feature, kde=True, palette='mako', hue='Died', alpha=0.8, ax=axs[row, col])

            # Define o título do subplot
            axs[row, col].set_title(feature)

            # Define os rótulos dos anos
            axs[row, col].set_xticklabels(year_labels)
        else:
            # Cria um histograma com densidade (kde) e colorido por 'Died'
            sns.histplot(data=df, x=feature, kde=True, palette='mako', hue='Died', alpha=0.8, ax=axs[row, col])

            # Define o título do subplot
            axs[row, col].set_title(feature)

        # Adiciona uma grade ao subplot
        axs[row, col].grid(alpha=0.5)

        # Atualiza o índice do subplot
        subplot_index += 1

# Ajusta o espaçamento entre os subplots
plt.tight_layout()

# Exibe os subplots
plt.show()

plt.figure(figsize=(10, 7))
plt.style.use('dark_background')

# Gráfico de violin plot
sns.violinplot(x='Died', y='Month', data=df, palette='mako')

# Título e rótulos dos eixos
plt.title('Distribuição dos Meses em relação às Mortes')
plt.xlabel('Mortes')
plt.ylabel('Mês')

plt.show()

plt.style.use('dark_background')
plt.figure(figsize=(12, 10))

# Gráfico de hexbin plot
plt.hexbin(df['Age'], df['Month'], gridsize=12, cmap='mako', mincnt=1)

# Barra de cores e rótulos dos eixos
plt.colorbar(label='Casos')
plt.xlabel('Idade')
plt.ylabel('Mês')

# Título do gráfico
plt.title('Idade Comparada com o Mês da Ocorrência')

plt.show()

plt.style.use('dark_background')
plt.figure(figsize=(10, 5))

# Gráfico de hexbin plot
plt.hexbin(df['Age'], df['Year'], gridsize=3, cmap='mako', mincnt=1)

# Barra de cores e rótulos dos eixos
plt.colorbar(label='Casos')
plt.xlabel('Idade')
plt.ylabel('Ano')

# Título do gráfico
plt.title('Idade Comparada com o Ano da Ocorrência')

plt.show()

